{"version":3,"sources":["data/Types.js","data/data.js","App.js","component/Tabs.jsx","component/ChatTabs.jsx","component/ChatInput.jsx","component/ChatView.jsx","component/Chat.jsx","component/ChatDisplay.jsx","component/Home.jsx","Router.jsx","data/ActionCreators.js","data/ChatReducer.js","data/DataStore.js","serviceWorker.js","index.js"],"names":["DataTypes","ACTIVE_THREAD_ID","THREADS","ActionTypes","LOAD_MESSAGE","ADD_MESSAGE","DELETE_MESSAGE","OPEN_THREAD","data","activeThreadId","threads","id","title","messages","text","timestamp","moment","Date","now","uuid","v4","App","store","DataStore","path","component","Router","to","Component","hot","module","imgSrc_1","Tabs","props","class","tabs","map","tab","index","key","className","active","onClick","src","ChatTabs","this","openThread","ChatInput","state","value","onChange","e","setState","target","handleSubmit","preventDefault","onSubmit","threadId","name","placeholder","ChatView","m","date","Chat","thread","onMessageClick","onMessageSubmit","ChatDisplay","activeThread","deleteMessage","addMessage","Home","console","log","mapDispatchToProps","loadData","dataType","type","payload","phData","clickTab","t","connect","connectFunction","render","routeProps","find","ACTIVE_THREAD_I","ChatReducer","combineReducers","action","messagesReducer","undefined","threadIndex","findIndex","findThreadIndex","oldThread","newThread","slice","length","newMessage","concat","filter","createStore","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kGAAA,oEAAO,IAAMA,EAAY,CACxBC,iBAAkB,iBAClBC,QAAS,WAGGC,EAAc,CAC1BC,aAAc,eACdC,YAAa,cACbC,eAAgB,iBAChBC,YAAa,gB,gCCTd,+DAGaC,EAAO,CAClBC,eAAgB,SAChBC,QAAS,CACR,CACCC,GAAI,SACJC,MAAO,cACPC,SAAU,CACT,CACCC,KAAM,8BACNC,UAZN,MAYiBC,GAAOC,KAAKC,OACvBP,GAAIQ,IAAKC,QAIb,CACET,GAAI,SACJC,MAAO,kBACPC,SAAU,O,oJCZRQ,E,iLAEF,OACC,kBAAC,IAAD,CAAUC,MAAOC,KACf,kBAAC,IAAD,KACC,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,QAAQC,UAAYC,MAChC,kBAAC,IAAD,CAAUC,GAAG,iB,GAPLC,aAgBHC,kBAAKC,EAALD,CAAcR,K,mJCtBnBU,EAAQ,6DAsCHC,EAnCF,SAACC,GAAD,OACG,yBAAKC,MAAM,0BAAyB,yBAAKA,MAAM,sCAC3C,yBAAKA,MAAM,eACV,wCAED,yBAAKA,MAAM,2BACP,wBAAIA,MAAM,YAEFD,EAAME,KAAKC,KAAI,SAACC,EAAKC,GAAN,OACX,wBACIC,IAAKD,EACLE,UAAWH,EAAII,OAAS,SAAW,GACnCC,QAAS,kBAAMT,EAAMS,QAAQL,EAAI1B,MAE9B,yBAAKuB,MAAM,uBACN,yBAAKA,MAAM,YACP,yBAAKS,KAAMN,EAAII,OAASV,GAAoBG,MAAO,4BACnD,0BAAMA,MAAM,iBAEhB,yBAAKA,MAAM,aACP,8BAAOG,EAAIzB,OACX,2BAAIyB,EAAIzB,MAAR,OAAmByB,EAAII,OAAS,SAAW,mBAS3E,wBAAIP,MAAM,eAAV,qBCpBLU,E,iLATb,OACC,kBAAC,EAAD,CACCT,KAAMU,KAAKZ,MAAME,KACjBO,QAASG,KAAKZ,MAAMa,iB,GANDlB,aCmDRmB,E,2MAnDXC,MAAQ,CACJC,MAAO,I,EAGPC,SAAW,SAACC,GACR,EAAKC,SAAS,CACdH,MAAOE,EAAEE,OAAOJ,S,EAIpBK,aAAe,SAACH,GACZA,EAAEI,iBACF,EAAKtB,MAAMuB,SAAS,EAAKR,MAAMC,MAAO,EAAKhB,MAAMwB,UACjD,EAAKL,SAAS,CACdH,MAAO,M,wEAKX,OACI,8BACO,yBACaT,UAAU,eACd,yBACIA,UAAU,sBACN,0BACIA,UAAU,+BAA8B,uBACxCA,UAAU,uBAGlB,8BACIkB,KAAK,GACLlB,UAAU,wBACVmB,YAAY,uBACZV,MAAOJ,KAAKG,MAAMC,MAClBC,SAAUL,KAAKK,WAGnB,yBACAV,UAAU,sBACN,0BAAMN,MAAM,6BAA4B,uBACpCM,UAAU,wBACVE,QAASG,KAAKS,uB,GA3C9B1B,a,iBCGdG,EAAQ,6DA4DH6B,EAxDE,SAAC3B,GAAD,OACD,yBAAKC,MAAM,2BACP,yBAAKA,MAAM,QACX,yBAAKA,MAAM,wBACF,yBAAKA,MAAM,uBACP,yBAAKA,MAAM,YACR,yBAAKS,IAAMZ,EAAUG,MAAM,4BAC3B,0BAAMA,MAAM,iBAEhB,yBAAKA,MAAM,aACP,2CAAiBD,EAAMwB,WAE3B,yBAAKvB,MAAM,aACP,8BAAM,uBAAGA,MAAM,kBACf,8BAAM,uBAAGA,MAAM,mBAGvB,yBAAKA,MAAM,kBAMf,yBAAKA,MAAM,2BAEHD,EAAMpB,SAASuB,KAAI,SAACyB,EAAGvB,GAAJ,OACf,yBACIE,UAAU,oCACVD,IAAKD,EACLI,QAAS,kBAAMT,EAAMS,QAAQmB,EAAElD,MAE/B,yBAAKuB,MAAM,gBACN,yBAAKS,IAAMZ,EAAWG,MAAO,6BAEjC,yBAAKA,MAAM,gBACP2B,EAAE/C,KACH,0BAAMoB,MAAM,YACX,kBAAC,IAAD,CAAQ4B,KAAMD,EAAE9C,mBAQrC,yBAAKmB,MAAM,eACZ,kBAAC,EAAD,CACKsB,SAAUvB,EAAMuB,SAChBC,SAAUxB,EAAMwB,eCrC7BM,EAfF,SAAC9B,GAAD,OACT,6BACI,kBAAC,EAAD,CACCE,KAAMF,EAAME,KACTtB,SAAUoB,EAAM+B,OAAOnD,SACvB6B,QAAST,EAAMgC,eACdT,SAAUvB,EAAMiC,gBACjBT,SAAUxB,EAAM+B,OAAOrD,OCMpBwD,E,iLAXd,OACC,kBAAC,EAAD,CACChC,KAAMU,KAAKZ,MAAME,KACjB6B,OAAQnB,KAAKZ,MAAMmC,aACnBH,eAAgBpB,KAAKZ,MAAMoC,cAC3BH,gBAAiBrB,KAAKZ,MAAMqC,iB,GARL1C,aC0BX2C,G,uLApBP,OACC,yBAAK/B,UAAU,yBACpB,yBAAKA,UAAU,oCACZ,kBAAC,EAAD,CACCL,KAAMU,KAAKZ,MAAME,KACjBW,WAAaD,KAAKZ,MAAMa,aAEzB,kBAAC,EAAD,CACGX,KAAMU,KAAKZ,MAAME,KACjBiC,aAAcvB,KAAKZ,MAAMmC,aAC5BE,WAAazB,KAAKZ,MAAMqC,WACxBD,cAAgBxB,KAAKZ,MAAMoC,gBAE1BG,QAAQC,IAAI5B,KAAKZ,MAAMmC,oB,GAhBZxC,c,kCCAnB,IAKM8C,EAAqB,CACzBC,SCVsB,SAACC,GAAD,MAAe,CACtCC,KAAM1E,IAAYC,aAClB0E,QAAS,CACRF,SAAUA,EACVpE,KAAMuE,IAAOH,MDObN,WCHwB,SAACxD,EAAM2C,GAAP,MAAqB,CAC9CoB,KAAM1E,IAAYE,YAClByE,QAAS,CACRhE,KAAMA,EACN2C,SAAUA,KDAVY,cCI2B,SAAC1D,GAAD,MAAS,CACrCkE,KAAM1E,IAAYG,eAClBwE,QAAS,CACRnE,GAAIA,KDNJmC,WCUwB,SAACnC,GAAD,MAAS,CAClCkE,KAAM1E,IAAYI,YAClBuE,QAAS,CACRnE,GAAIA,MDTAqE,EAAW,SAACtE,EAASD,GAAV,OAA6BC,EAAQ0B,KAAI,SAAA6C,GAAC,MACzD,CACCrE,MAAOqE,EAAErE,MACT6B,OAAQwC,EAAEtE,KAAOF,EACjBE,GAAIsE,EAAEtE,QASIe,EAFWwD,aAxBI,SAAClC,GAAD,sBACxBA,KAuBiD0B,EAE/BS,CAAe,iLAEvB,IAAD,OACJ,OAAO,kBAAC,IAAD,KACZ,kBAAC,IAAD,CAAO3D,KAAK,IACX4D,OAAS,SAACC,GAAD,OACR,kBAAC,EAAD,iBAAU,EAAKpD,MAAWoD,EAA1B,CACCjB,cAZa1D,EAYe,EAAKuB,MAAMvB,QAZjBC,EAY0B,EAAKsB,MAAMxB,eAZ9BC,EAAQ4E,MAC1C,SAAAL,GAAC,OAAIA,EAAEtE,KAAOA,MAYTwB,KAAQ6C,EAAS,EAAK/C,MAAMvB,QAAS,EAAKuB,MAAMxB,mBAbpC,IAACC,EAASC,KAczB,kBAAC,IAAD,CAAUgB,GAAG,SAToB,0CAchCkB,KAAKZ,MAAM0C,SAAS3E,IAAUuF,iBAC9B1C,KAAKZ,MAAM0C,SAAS3E,IAAUE,aAfE,GACtB0B,e,4FE3BF4D,G,MAAcC,YAAgB,CAC1ChF,eAkFD,WAA0D,IAA3BuC,EAA0B,uDAAlB,SAAU0C,EAAQ,uCACxD,OAAQA,EAAOb,MACd,KAAK1E,IAAYI,YAChB,OAAOmF,EAAOZ,QAAQnE,GAEvB,QACC,OAAOqC,IAvFTtC,QAwBD,WAWc,IAXUsC,EAWX,uDAXmB,CAC9B,CACCrC,GAAI,SACJC,MAAO,cACPC,SAAU8E,OAAgBC,EAAW,KAEtC,CACCjF,GAAI,SACJC,MAAO,kBACPC,SAAU8E,OAAgBC,EAAW,MAEnCF,EAAQ,uCACZ,OAAQA,EAAOb,MACd,KAAK1E,IAAYE,YACjB,KAAKF,IAAYG,eACjB,IAAMuF,EApCR,SAAyBnF,EAASgF,GAEjC,OADAlB,QAAQC,IAAI/D,GACJgF,EAAOb,MACd,KAAK1E,IAAYE,YACf,OAAOK,EAAQoF,WACf,SAACb,GAAD,OAAOA,EAAEtE,KAAO+E,EAAOZ,QAAQrB,YAGjC,KAAKtD,IAAYG,eAChB,OAAOI,EAAQoF,WACd,SAACb,GAAD,OAAOA,EAAEpE,SAASyE,MAAK,SAACzB,GAAD,OACvBA,EAAElD,KAAO+E,EAAOZ,QAAQnE,SAI1B,QACA,OAAOD,GAoBaqF,CAAgB/C,EAAO0C,GAC3ClB,QAAQC,IAAIiB,EAAOZ,QAAQrB,UAC3B,IAAMuC,EAAYhD,EAAM6C,GAElBI,EAAS,eACXD,EADW,CAEdnF,SAAU8E,EAAgBK,EAAUnF,SAAU6E,KAE/C,MAAM,GAAN,mBACK1C,EAAMkD,MAAM,EAAGL,IADpB,CAEEI,GAFF,YAGKjD,EAAMkD,MACTL,EAAc,EAAG7C,EAAMmD,UAIzB,QACA,OAAOnD,GAASxC,SAKlB,SAASmF,IAAmC,IAAnB3C,EAAkB,uDAAZ,GAAI0C,EAAQ,uCAC1C,OAAQA,EAAOb,MACd,KAAK1E,IAAYE,YACjB,IAAM+F,EAAa,CAClBtF,KAAM4E,EAAOZ,QAAQhE,KACrBC,UAAW,IAAIE,KAAK,yBACpBN,GAAIQ,IAAKC,MAET,OAAO4B,EAAMqD,OAAOD,GAErB,KAAKjG,IAAYG,eAChB,OAAO0C,EAAMsD,QAAO,SAAAzC,GAAC,OAAIA,EAAElD,KAAO+E,EAAOZ,QAAQnE,MAElD,QACC,OAAOqC,GChFKuD,gBAAYf,I,0KCQPgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASzB,OAAO,kBAAC/D,EAAA,EAAD,MAASyF,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.7dd20469.chunk.js","sourcesContent":["export const DataTypes = {\r\n\tACTIVE_THREAD_ID: \"activeThreadId\",\r\n\tTHREADS: \"threads\"\r\n}\r\n\r\nexport const ActionTypes = {\r\n\tLOAD_MESSAGE: \"LOAD_MESSAGE\",\r\n\tADD_MESSAGE: \"ADD_MESSAGE\",\r\n\tDELETE_MESSAGE: \"DELETE_MESSAGE\",\r\n\tOPEN_THREAD: \"OPEN_THREAD\"\r\n}","import uuid from 'uuid';\r\nimport moment from 'moment';\r\n\r\nexport const data = {\r\n\t\tactiveThreadId: '1-fca2', // New state property\r\n\t\tthreads: [ // Two threads in state\r\n\t\t\t{\r\n\t\t\t\tid: '1-fca2', // hardcoded pseudo-UUID\r\n\t\t\t\ttitle: 'Buzz Aldrin',\r\n\t\t\t\tmessages: [\r\n\t\t\t\t\t{ // This thread starts with a single message already\r\n\t\t\t\t\t\ttext: 'Twelve minutes to ignition.',\r\n\t\t\t\t\t\ttimestamp: moment(Date.now()),\r\n\t\t\t\t\t\tid: uuid.v4(),\r\n\t\t\t\t\t},\r\n\t\t\t\t],\r\n\t\t\t},\r\n\t\t{\r\n\t\t\t\tid: '2-be91',\r\n\t\t\t\ttitle: 'Michael Collins',\r\n\t\t\t\tmessages: [],\r\n\t\t\t},\r\n\t\t],\r\n\t};\r\n  \r\n\r\n","import React, {Component} from 'react';\nimport { BrowserRouter, Route, Switch, Redirect } from 'react-router-dom'\nimport { hot } from 'react-hot-loader';\nimport { Provider } from 'react-redux';\nimport DataStore from './data/DataStore'\nimport {Router} from './Router'\n\n\nclass App extends Component {\n\trender() {\n\t\t  return (\n\t\t  \t<Provider store={DataStore}>\n\t\t\t    <BrowserRouter>\n\t\t\t    \t<Switch>\n\t\t\t     \t <Route path=\"/chat\" component ={Router} />\n\t\t\t     \t <Redirect to=\"/chat\" />\n\t\t\t     \t</Switch>\n\t\t\t    </BrowserRouter>\n\t\t    </Provider>\n\t\t  );\n\t}\n}\n\n\nexport default hot (module) (App);","import React from 'react';\r\n\r\n    const imgSrc_1 = `https://static.turbosquid.com/Preview/001292/481/WV/_D.jpg`\r\n    const imgSrc_2 = `https://2.bp.blogspot.com/-8ytYF7cfPkQ/WkPe1-rtrcI/AAAAAAAAGqU/FGfTDVgkcIwmOTtjLka51vineFBExJuSACLcBGAs/s320/31.jpg`\r\n\r\nconst Tabs = (props) => (\r\n                <div class=\"col-md-4 col-xl-3 chat\"><div class=\"card mb-sm-3 mb-md-0 contacts_card\">\r\n                    <div class=\"card-header\">\r\n                     <h3> Users </h3>\r\n                    </div>\r\n                    <div class=\"card-body contacts_body\">\r\n                        <ui class=\"contacts\">\r\n                            {\r\n                                props.tabs.map((tab, index) => (\r\n                                    <li\r\n                                        key={index}\r\n                                        className={tab.active ? 'active' : ''}\r\n                                        onClick={() => props.onClick(tab.id)}\r\n                                        >\r\n                                           <div class=\"d-flex bd-highlight\">\r\n                                                <div class=\"img_cont\">\r\n                                                    <img src={ tab.active ? imgSrc_1: imgSrc_1} class= \"rounded-circle user_img\" />\r\n                                                    <span class=\"online_icon\"></span>\r\n                                                </div>\r\n                                                <div class=\"user_info\">\r\n                                                    <span>{tab.title}</span>\r\n                                                    <p>{tab.title} is {tab.active ? \"Online\" : \"Offline\"}</p>\r\n                                                </div>\r\n                                            </div>\r\n                                        \r\n                                    </li>\r\n                                ))\r\n                            }\r\n                        </ui>\r\n                    </div>\r\n                    <h5 class=\"card-footer\">Designed By MO</h5>\r\n                </div></div>\r\n    \r\n);\r\n\r\nexport default Tabs;\r\n\r\n              \r\n\r\n\r\n       /*         <div className='Tabs'>\r\n        <h3>Users</h3>\r\n        <div className='Tabs-buttons'>\r\n        {\r\n            props.tabs.map((tab, index) => (\r\n                <button\r\n                    key={index}\r\n                    className={tab.active ? 'btn btn-primary' : 'btn btn-secondary'}\r\n                    onClick={() => props.onClick(tab.id)}\r\n                    >\r\n                    {tab.title}\r\n                </button>\r\n            ))\r\n        }\r\n        </div>\r\n    </div>*/","import React, { Component } from 'react';\r\nimport Tabs from './Tabs'\r\n\r\nclass ChatTabs extends Component {\r\n\r\n\t\trender() {\r\n\t\treturn (\r\n\t\t\t<Tabs\r\n\t\t\t\ttabs={this.props.tabs}\r\n\t\t\t\tonClick={this.props.openThread}\r\n\t\t\t/>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default ChatTabs;\r\n\r\n","import React, { Component } from 'react';\r\n\r\nclass ChatInput extends Component {\r\n    state = {\r\n        value: '',\r\n        };\r\n\r\n        onChange = (e) => {\r\n            this.setState({\r\n            value: e.target.value,\r\n            })\r\n        };\r\n        \r\n        handleSubmit = (e) => {\r\n            e.preventDefault()\r\n            this.props.onSubmit(this.state.value, this.props.threadId);\r\n            this.setState({\r\n            value: '',\r\n        });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <form >\r\n                   <div \r\n                                className=\"input-group\">\r\n                            <div \r\n                                className=\"input-group-append\">\r\n                                    <span \r\n                                        className=\"input-group-text attach_btn\"><i \r\n                                        className=\"fas fa-paperclip\"\r\n                                        ></i></span>\r\n                                </div>\r\n                                <textarea \r\n                                    name=\"\" \r\n                                    className=\"form-control type_msg\" \r\n                                    placeholder=\"Type your message...\"\r\n                                    value={this.state.value}\r\n                                    onChange={this.onChange}\r\n                                    >   \r\n                                </textarea>\r\n                                <div \r\n                                className=\"input-group-append\">\r\n                                    <span class=\"input-group-text send_btn\"><i \r\n                                        className=\"fas fa-location-arrow\"\r\n                                        onClick={this.handleSubmit}\r\n                                        ></i></span>\r\n                            </div>\r\n                    </div>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ChatInput;\r\n\r\n\r\n                            ","import React from 'react';\r\nimport ChatInput from './ChatInput'\r\nimport Moment from 'react-moment';\r\n    \r\n\r\n    const imgSrc_1 = `https://static.turbosquid.com/Preview/001292/481/WV/_D.jpg`\r\n    const imgSrc_2 = `https://2.bp.blogspot.com/-8ytYF7cfPkQ/WkPe1-rtrcI/AAAAAAAAGqU/FGfTDVgkcIwmOTtjLka51vineFBExJuSACLcBGAs/s320/31.jpg`\r\n\r\n\r\nconst ChatView = (props) => (\r\n                <div class=\"col-md-8 col-xl-12 chat\">\r\n                    <div class=\"card\">\r\n                    <div class=\"card-header msg_head\">\r\n                             <div class=\"d-flex bd-highlight\">\r\n                                 <div class=\"img_cont\">\r\n                                    <img src= {imgSrc_1} class=\"rounded-circle user_img\" />\r\n                                    <span class=\"online_icon\"></span>\r\n                                </div>\r\n                                <div class=\"user_info\">\r\n                                    <span>Chat with {props.threadId}</span>\r\n                                </div>\r\n                                <div class=\"video_cam\">\r\n                                    <span><i class=\"fas fa-video\"></i></span>\r\n                                    <span><i class=\"fas fa-phone\"></i></span>\r\n                                </div>\r\n                            \r\n                            <div class=\"action_menu\">\r\n                                \r\n                            </div>\r\n                        </div>  \r\n                           \r\n                        </div>\r\n                        <div class=\"card-body msg_card_body\">\r\n                            {\r\n                                props.messages.map((m, index) => (\r\n                                    <div\r\n                                        className='d-flex justify-content-start mb-4'\r\n                                        key={index}\r\n                                        onClick={() => props.onClick(m.id)}\r\n                                    >\r\n                                        <div class=\"img_cont_msg\">\r\n                                             <img src={ imgSrc_1 } class= \"rounded-circle user_img\" />\r\n                                         </div>\r\n                                         <div class=\"msg_cotainer\">\r\n                                            {m.text}\r\n                                            <span class=\"msg_time\">\r\n                                             <Moment date={m.timestamp} /></span>\r\n                                        </div>                                        \r\n                                    </div>\r\n\r\n                                ))\r\n                            }\r\n                            </div>\r\n                      \r\n                        <div class=\"card-footer\">\r\n                       <ChatInput\r\n                            onSubmit={props.onSubmit}\r\n                            threadId={props.threadId}\r\n                        />\r\n                          </div>\r\n                        </div>\r\n                    </div>\r\n  \r\n);\r\n\r\nexport default ChatView;\r\n\r\n","import React from 'react';\r\nimport ChatView from './ChatView'\r\n\r\n\r\n\r\nconst Chat = (props) => (\r\n    <div>\r\n        <ChatView\r\n        \ttabs={props.tabs}\r\n            messages={props.thread.messages}\r\n            onClick={props.onMessageClick}\r\n             onSubmit={props.onMessageSubmit}\r\n            threadId={props.thread.id}\r\n        />\r\n      \r\n           \r\n\r\n    </div>\r\n);\r\n\r\nexport default Chat;","import React, { Component } from 'react';\r\nimport Chat from './Chat'\r\n\r\n\r\nclass ChatDisplay extends Component {\r\n\r\n\trender() {\r\n\treturn (\r\n\t\t<Chat\r\n\t\t\ttabs={this.props.tabs}\r\n\t\t\tthread={this.props.activeThread}\r\n\t\t\tonMessageClick={this.props.deleteMessage}\r\n\t\t\tonMessageSubmit={this.props.addMessage}\r\n\t\t\t/>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default ChatDisplay;\r\n","import React, { Component } from 'react';\r\nimport ChatTabs from './ChatTabs';\r\nimport ChatDisplay from './ChatDisplay'\r\nimport './Home.css'\r\n\r\n\r\n\r\nclass Home extends Component {\r\n\r\n    render() {\r\n        return (\r\n        \t<div className=\"container-fluid h-100\">\r\n\t\t\t <div className=\"row justify-content-center h-100\">\r\n\t\t\t    <ChatTabs \r\n\t\t\t    \ttabs={this.props.tabs}\r\n\t\t\t    \topenThread ={this.props.openThread}\r\n\t\t\t    \t/>\r\n\t\t\t    <ChatDisplay \r\n\t\t\t    \t\t\ttabs={this.props.tabs}\r\n\t\t\t    \t\t\tactiveThread={this.props.activeThread}\r\n\t\t\t\t\t\t\taddMessage ={this.props.addMessage}\r\n\t\t\t\t\t\t\tdeleteMessage ={this.props.deleteMessage}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t{console.log(this.props.activeThread)}\r\n\t\t\t  </div>\r\n\t\t\t</div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Home;\r\n","import React, { Component } from 'react';\r\nimport { Switch, Route, Redirect } from 'react-router-dom';\r\nimport { connect } from \"react-redux\";\r\nimport {loadData,  addMessage, deleteMessage, openThread } from \"./data/ActionCreators\";\r\nimport { DataTypes } from \"./data/Types\";\r\nimport Home from './component/Home'\r\n\r\nconst mapStateToTabsProps = (state) => ({\r\n\t...state\r\n});\r\n\r\n\r\nconst mapDispatchToProps = {\r\n\t\tloadData,\r\n\t\taddMessage,\r\n\t\tdeleteMessage, \r\n\t\topenThread,\r\n}\r\n\r\n\r\nconst clickTab = (threads, activeThreadId) => threads.map(t => (\r\n\t\t{\r\n\t\t\ttitle: t.title,\r\n\t\t\tactive: t.id === activeThreadId,\r\n\t\t\tid: t.id,\r\n\t\t}\r\n\t));\r\n\r\nconst findThread = (threads, id) => threads.find(\r\n\t\tt => t.id === id);\r\n\r\nconst connectFunction = connect(mapStateToTabsProps, mapDispatchToProps)\r\n\r\nexport const Router = connectFunction(\r\n\tclass extends Component {\r\n    render() {\r\n         return <Switch>\r\n\t\t\t\t<Route path=\"/\"\r\n\t\t\t\t\trender={ (routeProps) => \r\n\t\t\t\t\t\t<Home {...this.props} {...routeProps}\r\n\t\t\t\t\t\t\tactiveThread = {findThread (this.props.threads, this.props.activeThreadId)}\r\n\t\t\t\t\t\t\ttabs = {clickTab(this.props.threads, this.props.activeThreadId)} /> } />\r\n\t\t\t\t<Redirect to=\"/\" />\r\n\t\t\t</Switch>\r\n\t\t\t}\r\n\r\n\t\t\t\tcomponentDidMount() {\r\n\t\t\t\t\tthis.props.loadData(DataTypes.ACTIVE_THREAD_I);\r\n\t\t\t\t\tthis.props.loadData(DataTypes.THREADS);\r\n\t\t\t}\r\n    \t}\r\n    )\r\n\r\n","import { ActionTypes } from \"./Types\";\r\nimport { data as phData} from \"./data\";\r\n\r\nexport const loadData = (dataType) => ({\r\n\ttype: ActionTypes.LOAD_MESSAGE,\r\n\tpayload: {\r\n\t\tdataType: dataType,\r\n\t\tdata: phData[dataType]\r\n\t}\r\n});\r\n\r\nexport const addMessage = (text, threadId) => ({\r\n\ttype: ActionTypes.ADD_MESSAGE,\r\n\tpayload: {\r\n\t\ttext: text,\r\n\t\tthreadId: threadId,\r\n\t}\r\n});\r\n\r\nexport const deleteMessage = (id) => ({\r\n\ttype: ActionTypes.DELETE_MESSAGE,\r\n\tpayload: {\r\n\t\tid: id,\r\n\t}\r\n});\r\n\r\nexport const openThread = (id) => ({\r\n\ttype: ActionTypes.OPEN_THREAD,\r\n\tpayload: {\r\n\t\tid: id,\r\n\t}\r\n});","import { ActionTypes } from \"./Types\";\r\nimport {data } from './data';\r\nimport {  combineReducers } from 'redux';\r\nimport uuid from 'uuid';\r\nimport moment from 'moment';\r\n\r\n\r\nexport const ChatReducer = combineReducers({\r\n\tactiveThreadId: activeThreadIdReducer,\r\n\tthreads: threadsReducer,\r\n});\r\n\r\nfunction findThreadIndex(threads, action) {\r\n\tconsole.log(threads)\r\n\tswitch (action.type) {\r\n\t\tcase ActionTypes.ADD_MESSAGE: {\r\n\t\t\t\treturn threads.findIndex(\r\n\t\t\t\t(t) => t.id === action.payload.threadId\r\n\t\t\t);\r\n\t\t}\r\n\t\tcase ActionTypes.DELETE_MESSAGE: {\r\n\t\t\treturn threads.findIndex(\r\n\t\t\t\t(t) => t.messages.find((m) => (\r\n\t\t\t\tm.id === action.payload.id\r\n\t\t\t\t))\r\n\t\t\t);\r\n\t\t}\r\n\t\tdefault: {\r\n\t\treturn threads;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction threadsReducer(state = [\r\n\t\t{\r\n\t\t\tid: '1-fca2',\r\n\t\t\ttitle: 'Buzz Aldrin',\r\n\t\t\tmessages: messagesReducer(undefined, {}),\r\n\t\t},\r\n\t\t{\r\n\t\t\tid: '2-be91',\r\n\t\t\ttitle: 'Michael Collins',\r\n\t\t\tmessages: messagesReducer(undefined, {}),\r\n\t\t},\r\n\t\t], action) {\r\n\tswitch (action.type) {\r\n\t\tcase ActionTypes.ADD_MESSAGE:\r\n\t\tcase ActionTypes.DELETE_MESSAGE: {\r\n\t\tconst threadIndex = findThreadIndex(state, action);\r\n\t\tconsole.log(action.payload.threadId)\r\n\t\tconst oldThread = state[threadIndex];\r\n\t\t\r\n\t\tconst newThread = {\r\n\t\t\t...oldThread,\r\n\t\t\tmessages: messagesReducer(oldThread.messages, action),\r\n\t\t};\r\n\t\treturn [\r\n\t\t\t\t...state.slice(0, threadIndex),\r\n\t\t\t\tnewThread,\r\n\t\t\t\t...state.slice(\r\n\t\t\t\tthreadIndex + 1, state.length\r\n\t\t\t\t),\r\n\t\t\t];\r\n\t\t}\r\n\t\tdefault: {\r\n\t\treturn state || data;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction messagesReducer(state=[], action) {\r\n\tswitch (action.type) {\r\n\t\tcase ActionTypes.ADD_MESSAGE: {\r\n\t\tconst newMessage = {\r\n\t\t\ttext: action.payload.text,\r\n\t\t\ttimestamp: new Date('1976-04-19T12:59-0500'),\r\n\t\t\tid: uuid.v4(),\r\n\t\t};\r\n\t\t\treturn state.concat(newMessage);\r\n\t\t}\r\n\t\tcase ActionTypes.DELETE_MESSAGE: {\r\n\t\t\treturn state.filter(m => m.id !== action.payload.id);\r\n\t\t}\r\n\t\tdefault: {\r\n\t\t\treturn state;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\nfunction activeThreadIdReducer(state = '1-fca2', action) {\r\n\tswitch (action.type) {\r\n\t\tcase ActionTypes.OPEN_THREAD: {\r\n\t\t\treturn action.payload.id;\r\n\t\t}\r\n\t\tdefault: {\r\n\t\t\treturn state;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","import { createStore } from 'redux'\r\nimport { ChatReducer } from  './ChatReducer'\r\n\r\n\r\nexport default createStore(ChatReducer)","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}